---
#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")
groups:
- name: release
  jobs:
  - unit-and-integration-tests
  - check-for-cves
  - security-scan
  - lint-repo
  - claim-env
  - claim-ldap-env
  - prepare-env
  - prepare-ldap-env
  - run-cats
  - export-release
  - volume-services-acceptance-tests
  - volume-services-acceptance-tests-ldap
  - ship-what
  - ship-it
  - unclaim-env
  - unclaim-ldap-env

- name: periodics
  jobs:
  - bump-dependencies-go-mod
  - bump-golang
  - bump-bosh-blobs
  - sync-dot-github-dir
  - sync-readme

- name: manual
  jobs:
  - release-env-lock
  - release-ldap-env-lock

- name: version
  jobs:
  - patch-bump
  - minor-bump
  - manual-bump-mapfs-major

resource_types:
- name: semver
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/concourse/semver-resource
    tag: "1.6"
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))
  type: registry-image

- name: google-chat-notify-resource
  type: registry-image
  source:
    repository:  us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/springio/google-chat-notify-resource
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))
    tag: 0.0.1-SNAPSHOT

- name: git
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/concourse/git-resource
    tag: ubuntu
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))

- name: pcf-pool
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))

- name: pull-request
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/concourse-resources/pr-queue-resource
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))

resources:
- name: golang-release-latest
  type: git
  icon: github-box
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: repo
  type: git
  source:
    branch: develop
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:cloudfoundry/mapfs-release.git

- name: release-branch
  type: git
  source:
    branch: release
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:cloudfoundry/mapfs-release.git

- name: develop-branch-mergeback
  type: git
  source:
    uri: git@github.com:cloudfoundry/mapfs-release.git
    branch: develop
    private_key: ((github-tas-runtime-bot/private-key))

- name: ci
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: repo-readme
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths:
      - shared/*.md
      - mapfs-release/*.md
      - mapfs-release/readme/*.md

- name: go-version
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: [go-version.json]

#@ for repo in data.values.internal_repos:
- name: #@ "{}-repo".format(repo.name)
  type: git
  source:
    branch: main
    uri: #@ "git@github.com:cloudfoundry/{}.git".format(repo.name)
    private_key: ((github-tas-runtime-bot/private-key))
#@ end

- name: cf-deployment
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-acceptance-tests
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git

- name: cf-volume-services-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-volume-services-acceptance-tests.git
    branch: main

- name: nfs-volume-release
  type: git
  source:
    branch: master
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    ignore_paths:
    - scripts

- name: daily
  type: time
  icon: clock-outline
  source:
    interval: 24h

- name: env
  type: pcf-pool
  source:
    url: https://v2.shepherd.run
    service-account-key: ((shepherd-service-account-key))
    lease:
      namespace: tas-runtime
      pool:
        namespace: official
        name: cfd
    compatibility-mode: environments-app

- name: ldap-env
  type: pcf-pool
  source:
    url: https://v2.shepherd.run
    service-account-key: ((shepherd-service-account-key))
    lease:
      namespace: tas-runtime
      pool:
        namespace: official
        name: cfd
    compatibility-mode: environments-app

- name: github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: mapfs-release
    owner: cloudfoundry
  type: github-release

- name: draft-github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    drafts: true
    owner: cloudfoundry
    repository: mapfs-release
  type: github-release

- name: shared-templates
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths:
      - shared/github

- name: version
  type: semver
  source:
    access_key_id: ((aws-s3-107350105730-mapfs-volume-services-s3/access-key-id))
    bucket: mapfs-versions
    initial_version: 1.2.4
    key: current-version
    region_name: us-east-1
    secret_access_key: ((aws-s3-107350105730-mapfs-volume-services-s3/secret-access-key))
    assume_role_arn: ((aws-s3-107350105730-mapfs-volume-services-s3/assume-role))

- name: env-lock
  source:
    branch: main
    pool: mapfs-release-env-lock
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:/cloudfoundry/runtime-ci-pools.git
  type: pool

- name: ldap-env-lock
  source:
    branch: main
    pool: mapfs-release-ldap-env-lock
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:/cloudfoundry/runtime-ci-pools.git
  type: pool

- name: image
  type: docker-image
  source:
    repository: us-central1-docker.pkg.dev/cf-diego-pivotal/tas-runtime-dockerhub-mirror/cloudfoundry/tas-runtime-build
    tag: 'latest'
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))

- name: fstest
  type: git
  source:
    uri: https://github.com/zfsonlinux/fstest.git
    branch: master

- name: libfuse-git-release
  type: github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: libfuse
    user: libfuse
    tag_filter: "fuse-(.*)"

- name: meson-git-release
  type: github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: meson
    user: mesonbuild
    tag_filter: "^([0-9].*)"

- name: ninja-git-release
  type: github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: ninja
    user: ninja-build
    tag_filter: "^v(.*)"

- name: git-concourse-cve-scan
  type: git
  source:
    uri: git@github.com:pivotal/concourse-cve-scan.git
    branch: feat/add-vex-consideration
    private_key: ((github-tas-runtime-bot/private-key))

- name: git-tas-vex
  type: git
  source:
    uri: git@github.com:pivotal/tas-vex.git
    branch: main
    private_key: ((github-tas-runtime-bot/private-key))

- name: github-release-tas-cve
  type: github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: tas-cve
    user: pivotal

jobs:
- name: sync-readme
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  repo
      - get: daily
        trigger: true
      - get: repo-readme
        trigger: true
  - do:
    - task: sync-readme
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
    - put: repo
      params:
       rebase: true
       repository: synced-repo

- name: sync-dot-github-dir
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  repo
      - get: shared-templates
        trigger: true
  - do:
    - task: sync-dot-github-dir
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
    - put: repo
      params:
       rebase: true
       repository: synced-repo

- name: check-for-cves
  plan:
  - in_parallel:
      steps:
      - get: git-concourse-cve-scan
      - get: github-release-tas-cve
      - get: repo
        trigger: true
      - get: git-tas-vex
  - task: run-scan
    file: git-concourse-cve-scan/tasks/scan/scan.yml
    input_mapping:
      concourse-cve-scan: git-concourse-cve-scan
      tas-cve: github-release-tas-cve
      target-bosh-release: repo
      tas-vex: git-tas-vex
    params:
      DRY_RUN: true
      GRYPE_FAILURE_LEVEL: negligible  #! Can be any of: none | negligible | low | medium | high | critical
      RELEASE_NAME: mapfs
      RELEASE_VERSION: pre-release-cve-scan

- name: bump-dependencies-go-mod
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: mapfs-repo
      - get: image
      - get: daily
        trigger: true
  - do:
    - task: mapfs-bump-dependencies-go-mod
      image: image
      file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
      input_mapping:
        repo: mapfs-repo
      params:
        GO_MODS: |
          go.mod
    - put: mapfs-repo
      params:
        rebase: true
        repository: bumped-repo
  - do:
    - task: mapfs-release-bump-dependencies-go-mod
      image: image
      file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
    - put: repo
      params:
        rebase: true
        repository: bumped-repo

- name: bump-golang
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: image
      - get: go-version
        trigger: true
      - get: golang-release-latest
        trigger: true

  - task: bump-golang-package-name
    image: image
    file: ci/shared/tasks/bump-golang-package-name/linux.yml
    params:
      PLATFORM: linux

  - task: bump-golang-linux
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: bumped-repo
      package-release: golang-release-latest
    params:
      PACKAGE_NAME: golang-*-linux
      AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-mapfs-volume-services-s3/access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-mapfs-volume-services-s3/secret-access-key))
      AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-mapfs-volume-services-s3/assume-role))
  - put: repo
    params:
      rebase: true
      repository: vendored-repo

- name: security-scan
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get: repo
        trigger: true
  - task: build
    image: image
    file: ci/shared/tasks/golang-security-scan/linux.yml
    params:
      PATHS: "src/mapfs"
    input_mapping:
      release: repo

- name: unit-and-integration-tests
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
        trigger: true
      - get: fstest
      - get: image
      - get: package-release
        resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - task: build-binaries
    file: ci/shared/tasks/build-binaries/linux.yml
    privileged: true
    params:
      DEFAULT_PARAMS: "ci/mapfs-release/default-params/build-binaries/linux.yml"
    vars:
      image_repository: cloudfoundry/tas-runtime-build
      image_tag: ((.:image_tag))
  - in_parallel:
      steps:
#@ for repo in data.values.internal_repos:
      - task: #@ "{}".format(repo.name)
        file: ci/shared/tasks/run-bin-test/linux.yml
        privileged: true
        vars:
          image_repository: cloudfoundry/tas-runtime-build
          image_tag: ((.:image_tag))
        input_mapping:
          input-01: fstest
        params:
          DIR: #@ "src/{}".format(repo.name)
          ENVS: |
            FSTEST_DIR=input-01
          VERIFICATIONS: |
            verify_go repo/$DIR
            verify_go_version_match_bosh_release repo
            verify_gofmt repo/$DIR
            verify_govet repo/$DIR
          DEFAULT_PARAMS: "ci/mapfs-release/default-params/run-bin-test/linux.yml"
#@ end

- name: bump-bosh-blobs
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: meson-git-release
        trigger: true
      - get: ninja-git-release
        trigger: true
        params:
          include_source_tarball: true
      - get: libfuse-git-release
        trigger: true
      - get: repo
      - get: image
  - do:
    - task: bump-bosh-blob-meson
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: meson-git-release
      params:
        BOSH_BLOB_PATH: build-deps/meson-*.tar.gz
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-mapfs-volume-services-s3/access-key-id))
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-mapfs-volume-services-s3/secret-access-key))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-mapfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-ninja
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: ninja-git-release
      params:
        BOSH_BLOB_PATH: build-deps/ninja-*.tar.gz
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-mapfs-volume-services-s3/access-key-id))
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-mapfs-volume-services-s3/secret-access-key))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-mapfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-libfuse
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: libfuse-git-release
      params:
        BOSH_BLOB_PATH: fuse/fuse-*.tar.gz
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-mapfs-volume-services-s3/access-key-id))
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-mapfs-volume-services-s3/secret-access-key))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-mapfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo

- name: lint-repo
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
        trigger: true
      - get: image
  - task: lint-repo
    file: ci/shared/tasks/lint-repo/linux.yml
    image: image

- name: claim-env
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: image
      - get: repo
        trigger: true
        passed:
        - check-for-cves
        - unit-and-integration-tests
        - lint-repo
        - security-scan
      - put: env-lock
        params:
          acquire: true
  - put: env
    params:
      action: create
      duration: 176h
      resource: env
      description: mapfs pipeline
    timeout: 6h
  - task: wait-for-cf-api
    file: ci/shared/tasks/wait-for-cf-api/linux.yml
    input_mapping:
      toolsmiths-env: env
    image: image

- name: claim-ldap-env
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: image
      - get: repo
        trigger: true
        passed:
        - check-for-cves
        - unit-and-integration-tests
        - security-scan
        - lint-repo
      - put: ldap-env-lock
        params:
          acquire: true
  - put: ldap-env
    params:
      action: create
      duration: 176h
      resource: ldap-env
      description: mapfs ldap pipeline
  - task: wait-for-cf-api
    file: ci/shared/tasks/wait-for-cf-api/linux.yml
    input_mapping:
      toolsmiths-env: ldap-env
    image: image

- name: prepare-env
  public: true
  build_logs_to_retain: 100
  max_in_flight: 1
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: env
        passed: [ claim-env ]
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: image
      - get: cf-deployment
      - get: ci
      - get: nfs-volume-release
      - get: repo
        trigger: true
        passed: [ claim-env ]
  - task: prepare-cf-deployment-env
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
  - task: combine-ops-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-deployment
    params:
      COPY_ACTIONS: |
        {input-01/operations/use-compiled-releases.yml,combined-assets}
        {input-01/operations/scale-to-one-az.yml,combined-assets}
        {input-01/operations/enable-nfs-volume-service.yml,combined-assets}
        {input-01/operations/backup-and-restore/enable-backup-restore.yml,combined-assets}
        {input-01/operations/backup-and-restore/enable-restore-nfs-broker.yml,combined-assets}
        {input-01/operations/test/enable-nfs-test-server.yml,combined-assets}
        {input-01/operations/experimental/fast-deploy-with-downtime-and-danger.yml,combined-assets}
        {ci/shared/opsfiles/scale-for-cats.yml,combined-assets}
        {ci/shared/opsfiles/add-lb-ca-cert.yml,combined-assets}
        {ci/mapfs-release/opsfiles/*.yml,combined-assets}
  - task: upload-latest-nfs-release
    file: ci/shared/tasks/bosh-upload-dev-releases/linux.yml
    image: image
    input_mapping:
      release-01: nfs-volume-release
  - task: deploy-cf-deployment
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      vars-files: prepared-env
      toolsmiths-env: env
    params:
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)
  - task: uptimer-measure-with-garden-runc-release-update
    file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
    input_mapping:
      ops-files: combined-assets
      release: repo
      vars-files: prepared-env
      toolsmiths-env: env
    params:
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "true"
      APP_PUSHABILITY_THRESHOLD: "20"
      APP_STATS_THRESHOLD: "20"
      HTTP_AVAILABILITY_THRESHOLD: "20"
      TCP_AVAILABILITY_THRESHOLD: "20"
      AVAILABLE_PORT: "-1"
      TCP_PORT: "1029"
      FAIL_ON_DOWNTIME: "true"
      MEASURE_SYSLOG_AVAILABILITY: "false"
      MEASURE_TCP_AVAILABILITY: "true"
      RECENT_LOGS_THRESHOLD: "50"
      STREAMING_LOGS_THRESHOLD: "50"
      APP_SYSLOG_AVAILABILITY_THRESHOLD: "50"
      USE_SINGLE_APP_INSTANCE: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)
  - task: open-asg-for-credhub
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      INSTANCE_GROUP_NAME: credhub
      SECURITY_GROUP_NAME: credhub
  - task: open-asg-for-uaa
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      INSTANCE_GROUP_NAME: uaa
      SECURITY_GROUP_NAME: uaa
  - task: enable-feature-flags-for-cats
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ENABLED_FEATURE_FLAGS: diego_docker service_instance_sharing
  - task: run-smoke-tests
    image: image
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    image: image
    attempts: 2
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: run-cats
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed: [ prepare-env ]
      - get: env
        passed: [ prepare-env ]
        trigger: true
      - get: ci
      - get: cf-acceptance-tests
      - get: cf-deployment-concourse-tasks
      - get: image
      - get: repo
        passed: [ prepare-env ]
  - task: create-cats-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      ENVS: |
        VOLUME_SERVICE_NAME=nfs
        VOLUME_SERVICE_PLAN=Existing
      CONFIGS: cats
      WITH_VOLUME_SERVICES: true
      WITH_ISOSEG: false
      WITH_DYNAMIC_ASG: false
  - task: cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    attempts: 2
    input_mapping:
      integration-config: built-acceptance-test-configs
    params:
      CONFIG_FILE_PATH: cats.json
      NODES: 4

- name: volume-services-acceptance-tests
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cf-volume-services-acceptance-tests
      - get: ci
      - get: image
      - get: env
        passed: [ prepare-env ]
        trigger: true
      - get: nfs-volume-release
        passed: [ prepare-env ]
      - get: repo
        passed: [ prepare-env ]
        trigger: true
  - task: generate-pats-config-nfs
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      ENVS: |
        VOLUME_SERVICE_BIND_BOGUS_CONFIG='{\"uid\":\"1000\",\"gid\":\"1000\"}'
        VOLUME_SERVICE_BIND_CONFIG='["{\"uid\":\"1000\",\"gid\":\"1000\"}","{\"uid\":\"1000\",\"gid\":\"1000\",\"mount\":\"/var/vcap/data/foo\"}","{\"uid\":\"1000\",\"gid\":\"1000\",\"version\":\"3\"}","{\"uid\":\"1000\",\"gid\":\"1000\",\"version\":\"4.0\"}","{\"uid\":\"1000\",\"gid\":\"1000\",\"version\":\"4.1\"}","{\"uid\":\"1000\",\"gid\":\"1000\",\"version\":\"4.2\"}"]'
        VOLUME_SERVICE_CREATE_BOGUS_CONFIG='{\"share\":\"nfstestserver.service.cf.internal/export/nonexistensevol\"}'
        VOLUME_SERVICE_CREATE_CONFIG='{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
        VOLUME_SERVICE_PLAN_NAME=Existing
        VOLUME_SERVICE_SERVICE_NAME=nfs
      CONFIGS: volume-services-acceptance-tests
    output_mapping:
      built-acceptance-test-configs: nfs-pats-config
  - task: run-volume-services-acceptance-tests-nfs
    image: image
    file: ci/shared/tasks/run-volume-services-acceptance-tests/linux.yml
    input_mapping:
      config: nfs-pats-config
    attempts: 2
    params:
      PARALLEL_NODES: 5
      TEST_MOUNT_FAIL_LOGGING: true
      TEST_MOUNT_OPTIONS: true
      TEST_MULTI_CELL: true
      TEST_READ_ONLY: true

- name: export-release
  serial: true
  serial_groups: [acceptance-tests]
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
        passed: [prepare-env]
        trigger: true
      - get: image
      - get: env
        passed: [prepare-env]
        trigger: true
      - get: cf-deployment-concourse-tasks
  - task: export-release
    file: ci/shared/tasks/bosh-export-release/linux.yml
    image: image

- name: prepare-ldap-env
  public: true
  build_logs_to_retain: 100
  max_in_flight: 1
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ldap-env
        passed:
        - claim-ldap-env
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment
      - get: ci
      - get: image
      - get: nfs-volume-release
      - get: repo
        trigger: true
        passed:
        - claim-ldap-env
  - task: prepare-cf-deployment-env
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
    input_mapping:
      env: ldap-env
    params:
      VARS:
        nfs-ldap-host: ((volume-services-ldap/hostname))
        nfs-ldap-service-user: ((volume-services-ldap/username))
        nfs-ldap-service-password: ((volume-services-ldap/password))
        nfs-ldap-port: ((volume-services-ldap/port))
        nfs-ldap-proto: ((volume-services-ldap/protocol))
        nfs-ldap-fqdn: ((volume-services-ldap/fqdn))
  - task: combine-ops-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-deployment
    params:
      COPY_ACTIONS: |
        {input-01/operations/use-compiled-releases.yml,combined-assets}
        {input-01/operations/scale-to-one-az.yml,combined-assets}
        {input-01/operations/enable-nfs-volume-service.yml,combined-assets}
        {input-01/operations/enable-nfs-ldap.yml,combined-assets}
        {input-01/operations/backup-and-restore/enable-backup-restore.yml,combined-assets}
        {input-01/operations/backup-and-restore/enable-restore-nfs-broker.yml,combined-assets}
        {input-01/operations/test/enable-nfs-test-server.yml,combined-assets}
        {input-01/operations/test/enable-nfs-test-ldapserver.yml,combined-assets}
        {input-01/operations/experimental/fast-deploy-with-downtime-and-danger.yml,combined-assets}
        {ci/shared/opsfiles/scale-for-cats.yml,combined-assets}
        {ci/mapfs-release/opsfiles/*.yml,combined-assets}
  - task: upload-latest-nfs-release
    file: ci/shared/tasks/bosh-upload-dev-releases/linux.yml
    image: image
    input_mapping:
      env: ldap-env
      release-01: nfs-volume-release
  - task: deploy-cf-deployment
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      vars-files: prepared-env
      toolsmiths-env: ldap-env
    params:
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles + data.values.opsfiles_ldap)
  - task: uptimer-measure-with-garden-runc-release-update
    file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
    input_mapping:
      ops-files: combined-assets
      release: repo
      vars-files: prepared-env
      toolsmiths-env: ldap-env
    params:
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "true"
      APP_PUSHABILITY_THRESHOLD: "20"
      APP_STATS_THRESHOLD: "20"
      HTTP_AVAILABILITY_THRESHOLD: "20"
      TCP_AVAILABILITY_THRESHOLD: "20"
      AVAILABLE_PORT: "-1"
      TCP_PORT: "1029"
      FAIL_ON_DOWNTIME: "true"
      MEASURE_SYSLOG_AVAILABILITY: "false"
      MEASURE_TCP_AVAILABILITY: "true"
      RECENT_LOGS_THRESHOLD: "50"
      STREAMING_LOGS_THRESHOLD: "50"
      APP_SYSLOG_AVAILABILITY_THRESHOLD: "50"
      USE_SINGLE_APP_INSTANCE: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles + data.values.opsfiles_ldap)
  - task: open-asg-for-credhub
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      toolsmiths-env: ldap-env
    params:
      INSTANCE_GROUP_NAME: credhub
      SECURITY_GROUP_NAME: credhub
  - task: open-asg-for-uaa
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      toolsmiths-env: ldap-env
    params:
      INSTANCE_GROUP_NAME: uaa
      SECURITY_GROUP_NAME: uaa
  - task: enable-feature-flags-for-cats
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      toolsmiths-env: ldap-env
    params:
      ENABLED_FEATURE_FLAGS: diego_docker service_instance_sharing
  - task: run-smoke-tests
    image: image
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: ldap-env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    image: image
    attempts: 2
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: ldap-env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: volume-services-acceptance-tests-ldap
  serial_groups:
  - acceptance-tests-ldap
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cf-volume-services-acceptance-tests
      - get: ci
      - get: image
      - get: ldap-env
        passed: [ prepare-ldap-env ]
        trigger: true
      - get: nfs-volume-release
        passed: [ prepare-ldap-env ]
      - get: repo
        passed: [ prepare-ldap-env ]
        trigger: true
  - task: generate-pats-config-nfs-legacy
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      ENVS: |
        VOLUME_SERVICE_BIND_CONFIG='["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
        VOLUME_SERVICE_CREATE_CONFIG='{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
        VOLUME_SERVICE_DISALLOWED_LDAP_BIND_CONFIG='{\"uid\":\"1000\",\"gid\":\"1000\"}'
        VOLUME_SERVICE_PLAN_NAME=Existing
        VOLUME_SERVICE_SERVICE_NAME=nfs-legacy
      CONFIGS: volume-services-acceptance-tests
    input_mapping:
      env: ldap-env
    output_mapping:
      built-acceptance-test-configs: nfs-pats-config-legacy
  - task: run-volume-services-acceptance-tests-nfs-legacy
    image: image
    file: ci/shared/tasks/run-volume-services-acceptance-tests/linux.yml
    input_mapping:
      config: nfs-pats-config-legacy
    attempts: 2
    params:
      TEST_DOCKER_PORA: true
  - task: generate-pats-config-nfs
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      ENVS: |
        VOLUME_SERVICE_BIND_CONFIG='["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
        VOLUME_SERVICE_CREATE_CONFIG='{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
        VOLUME_SERVICE_DISALLOWED_LDAP_BIND_CONFIG='{\"uid\":\"1000\",\"gid\":\"1000\"}'
        VOLUME_SERVICE_PLAN_NAME=Existing
        VOLUME_SERVICE_SERVICE_NAME=nfs
      CONFIGS: volume-services-acceptance-tests
    input_mapping:
      env: ldap-env
    output_mapping:
      built-acceptance-test-configs: nfs-pats-config
  - task: run-volume-services-acceptance-tests-nfs
    image: image
    file: ci/shared/tasks/run-volume-services-acceptance-tests/linux.yml
    input_mapping:
      config: nfs-pats-config
    attempts: 2
    params:
      TEST_DOCKER_PORA: true

- name: ship-what
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed:
            - run-cats
            - volume-services-acceptance-tests
            - volume-services-acceptance-tests-ldap
            - export-release
          trigger: true
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: env
          passed:
            - volume-services-acceptance-tests
            - run-cats
            - export-release
          trigger: true
        - get: ldap-env
          passed:
            - volume-services-acceptance-tests-ldap
          trigger: true

    - task: check-safe-to-release-repo
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: build-release-notes-diego-release
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

- name: ship-it
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: image
      - get: release-branch
        params:
          submodules: none
      - get: repo
        passed: [ship-what]
      - get: version
      - get: develop-branch-mergeback
        params:
          submodules: none

  - task: check-safe-to-release-branch
    image: image
    file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
    input_mapping:
      release-repo: release-branch

  - task: create-release-notes
    file: ci/shared/tasks/generate-volume-services-release-notes/linux.yml
  - task: format-release-notes
    image: image
    file: ci/shared/tasks/format-volume-services-release-notes/linux.yml

  - task: bosh-finalize-release
    image: image
    file: ci/shared/tasks/bosh-finalize-release/linux.yml
    params:
      AWS_ACCESS_KEY_ID: ((aws-s3-diego-release-blobs/access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-s3-diego-release-blobs/secret-access-key))
      AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-mapfs-volume-services-s3/assume-role))

  - put: release-branch
    params:
      repository: mapfs-final-release
      tag: version/number
      tag_prefix: v

  - task: merge-release-onto-develop
    image: image
    file: ci/shared/tasks/git-merge-branches/linux.yml
    input_mapping:
      source-branch: release-branch
      onto-branch: develop-branch-mergeback
    params:
      SOURCE_BRANCH_NAME: release
      ONTO_BRANCH_NAME: develop

  - in_parallel:
      steps:
      - put: draft-github-release
        params:
          name: version/number
          tag: version/number
          body: release-notes/release-notes.md
          tag_prefix: v
          globs:
          - finalized-release-tarball/mapfs-*.tgz
      - put: develop-branch-mergeback
        params:
          repository: merged-branch

  - get: next-version
    resource: version
    params: {bump: patch}
  - put: next-version
    params:
      file: next-version/number
    resource: version

- name: unclaim-env
  plan:
  - get: env
    passed:
    - ship-what
    trigger: true
  - get: env-lock
  - put: env
    params:
      action: release
  - put: env-lock
    params:
      release: env-lock

- name: unclaim-ldap-env
  plan:
  - get: ldap-env
    passed:
    - ship-what
    trigger: true
  - get: ldap-env-lock
  - put: ldap-env
    params:
      action: release
  - put: ldap-env-lock
    params:
      release: ldap-env-lock

- name: release-env-lock
  plan:
    - get: env-lock
  ensure:
    put: env-lock
    params:
      release: env-lock

- name: release-ldap-env-lock
  plan:
    - get: ldap-env-lock
  ensure:
    put: ldap-env-lock
    params:
      release: ldap-env-lock

- name: patch-bump
  plan:
  - get: version
    params:
      bump: final
  - put: version
    params:
      bump: patch

- name: minor-bump
  plan:
  - get: version
    params:
      bump: final
  - put: version
    params:
      bump: minor

- name: manual-bump-mapfs-major
  plan:
  - get: version
    params:
      bump: final
  - put: version
    params:
      bump: major
