---
#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")
cerberus_secrets:
#! gcr_viewer_key was needed on 2024-03-20 for getting concourse container images from our GCR instance. Generated by using personal creds to log into the mapbu-cryogenics google cloud project.
- &gcr_viewer_key  ((gcp-tas-runtime-service-account/config-json))

#! as of 2024-03-18 github creds are required to access various repos used in this CI. most importantly for autobumping and releasing the bosh release. They live in lastpass ( and cerberus )
- &github-ssh-key ((github-tas-runtime-bot/private-key))
- &github-access-token ((github-tas-runtime-bot/access-token))
- &github-user App Platform Runtime Working Group CI Bot
- &github-email tas-runtime.pdl+tas-runtime-bot@broadcom.com

#! aws uploader role was needed on 2024-03-20 for uploading blobs to the aws s3 blobstore of the release. It was generated by creating a Service Request for a switch role user for the cryogenics account
- &aws-uploader-role-id ((aws-s3-107350105730-mapfs-volume-services-s3/access-key-id))
- &aws-uploader-role-secret ((aws-s3-107350105730-mapfs-volume-services-s3/secret-access-key))
- &aws-uploader-role-arn ((aws-s3-107350105730-mapfs-volume-services-s3/assume-role))

- &shepherd-token ((shepherd-service-account-key))

number_of_retries: &number_of_retries 2

groups:
- name: release
  jobs:
  - unit-and-integration-tests
  - claim-env-combined-nfs-mapfs-volume-release-tests
  - combined-nfs-mapfs-volume-release-tests
  - env-gate
  - claim-env
  - deploy-cf
  - cats-nfs
  - drats
  - pats
  - unclaim-env
  - claim-ldap-env
  - deploy-cf-with-ldap
  - pats-nfs-ldap
  - unclaim-ldap-env
  - ship-what
  - check-for-cves
  - security-scan
  - shipit-mapfs
- name: periodics
  jobs:
  - bump-bosh-blobs
  - bump-package-golang
  - bump-dependencies-go-mod

- name: version
  jobs:
  - manual-bump-mapfs-patch
  - manual-bump-mapfs-minor
  - manual-bump-mapfs-major

resource_types:
- name: semver
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/concourse/semver-resource
    tag: "1.6"
    username: _json_key
    password: *gcr_viewer_key
  type: registry-image

- name: google-chat-notify-resource
  type: registry-image
  source:
    repository:  us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/springio/google-chat-notify-resource
    username: _json_key
    password: *gcr_viewer_key
    tag: 0.0.1-SNAPSHOT

- name: git
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/concourse/git-resource
    tag: ubuntu
    username: _json_key
    password: *gcr_viewer_key

- name: pcf-pool
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1
    username: _json_key
    password: *gcr_viewer_key

- name: pull-request
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/concourse-resources/pr-queue-resource
    username: _json_key
    password: *gcr_viewer_key

resources:
- name: fstest
  type: git
  source:
    uri: https://github.com/zfsonlinux/fstest.git
    branch: master

- name: image
  type: docker-image                             
  source:                                        
    repository: us-central1-docker.pkg.dev/cf-diego-pivotal/tas-runtime-dockerhub-mirror/cloudfoundry/tas-runtime-build
    tag: 'latest'
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))

- name: ci
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: mapfs-release
    owner: cloudfoundry
  type: github-release

- name: env-tas-xenial
  icon: pool
  type: pcf-pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd-token
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: tas-2_11

- name: git-concourse-cve-scan
  type: git
  source:
    uri: git@github.com:pivotal/concourse-cve-scan.git
    branch: feat/add-vex-consideration
    private_key: *github-ssh-key

- name: git-tas-vex
  type: git
  source:
    uri: git@github.com:pivotal/tas-vex.git
    branch: main
    private_key: *github-ssh-key

- name: libfuse-git-release
  type: github-release
  source:
    access_token: *github-access-token
    repository: libfuse
    user: libfuse
    tag_filter: "fuse-(.*)"

- name: meson-git-release
  type: github-release
  source:
    access_token: *github-access-token
    repository: meson
    user: mesonbuild
    tag_filter: "^([0-9].*)"

- name: ninja-git-release
  type: github-release
  source:
    access_token: *github-access-token
    repository: ninja
    user: ninja-build
    tag_filter: "^v(.*)"

- name: github-release-tas-cve
  type: github-release
  source:
    access_token: *github-access-token
    repository: tas-cve
    user: pivotal

- name: daily
  type: time
  icon: clock-outline
  source:
    interval: 24h

- name: every-hour
  type: time
  icon: clock-outline
  source:
    interval: 1h

- name: shepherd-env
  type: pcf-pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd-token
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd
    compatibility_mode: environments-app
    debug: true

- name: shepherd-env-ldap
  type: pcf-pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd-token
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd
    compatibility_mode: environments-app
    debug: true

- name: persi-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/persi-ci
    branch: master

- name: nfs-volume-release
  type: git
  source:
    branch: master
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    ignore_paths:
    - scripts

- name: updated-go-mod-mapfs
  type: git
  source:
    branch: main
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs.git

- name: mapfs-release-develop
  type: git
  source:
    branch: develop
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs-release.git

- name: develop-branch-mergeback
  type: git
  source:
    uri: git@github.com:cloudfoundry/mapfs-release.git
    branch: develop
    private_key: *github-ssh-key

- name: mapfs-release-release
  type: git
  source:
    branch: release
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs-release.git

- name: mapfs-version
  type: semver
  source:
    access_key_id: *aws-uploader-role-id
    bucket: mapfs-versions
    initial_version: 1.2.4
    key: current-version
    region_name: us-east-1
    secret_access_key: *aws-uploader-role-secret
    assume_role_arn: *aws-uploader-role-arn

- name: github-release-mapfs
  type: github-release
  source:
    user: cloudfoundry
    repository: mapfs-release
    drafts: true
    access_token: *github-access-token


- name: cf-deployment
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-volume-services-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-volume-services-acceptance-tests.git
    branch: main

- name: cf-acceptance-tests
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git

- name: bbr-binary-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: *github-access-token

- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/disaster-recovery-acceptance-tests.git
    branch: main

- name: go-version
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: [go-version.json]

- name: golang-release-latest
  type: git
  icon: github-box
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: ((tas-runtime-bot-cryo-deploy-key-for-pivotal-org/private_key))
    branch: main

- name: image-cryogenics-essentials
  icon: docker
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/essentials/cryo-essentials
    tag: latest
    username: _json_key
    password: *gcr_viewer_key

jobs:
- name: check-for-cves
  plan:
  - in_parallel:
    - get: git-concourse-cve-scan
    - get: github-release-tas-cve
    - get: mapfs-release-develop
      trigger: true
    - get: git-tas-vex
  - task: run-scan
    file: git-concourse-cve-scan/tasks/scan/scan.yml
    input_mapping:
      concourse-cve-scan: git-concourse-cve-scan
      tas-cve: github-release-tas-cve
      target-bosh-release: mapfs-release-develop
      tas-vex: git-tas-vex
    params:
      DRY_RUN: true
      GRYPE_FAILURE_LEVEL: negligible  #! Can be any of: none | negligible | low | medium | high | critical
      RELEASE_NAME: mapfs
      RELEASE_VERSION: pre-release-cve-scan

- name: bump-dependencies-go-mod
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
        resource: mapfs-release-develop
      - get: updated-go-mod-mapfs
      - get: image
      - get: daily
        trigger: true
  - do:
    - task: mapfs-bump-dependencies-go-mod
      image: image
      file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
      input_mapping:
        repo: updated-go-mod-mapfs
      params:
        GO_MODS: |
          go.mod
    - put: updated-go-mod-mapfs
      params:
        rebase: true
        repository: bumped-repo
  - do:
    - task: mapfs-release-bump-dependencies-go-mod
      image: image
      file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
      params:
        GO_MODS: |
          src/bosh_release/go.mod
    - put: mapfs-release-develop
      params:
        rebase: true
        repository: bumped-repo

- name: bump-package-golang
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      resource: mapfs-release-develop
    - get: image
    - get: go-version
      trigger: true
    - get: golang-release-latest
      trigger: true

  - task: bump-golang-package-name
    image: image
    file: ci/shared/tasks/bump-golang-package-name/linux.yml
    params:
      PLATFORM: linux

  - task: bump-golang-linux
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: bumped-repo
      package-release: golang-release-latest
    params:
      PACKAGE_NAME: golang-*-linux
      AWS_ACCESS_KEY_ID: *aws-uploader-role-id
      AWS_SECRET_ACCESS_KEY: *aws-uploader-role-secret
      AWS_ASSUME_ROLE_ARN: *aws-uploader-role-arn
  - put: repo
    resource: mapfs-release-develop
    params:
      rebase: true
      repository: vendored-repo

- name: security-scan
  plan:
  - in_parallel:
    - get: ci
    - get: image
    - get: mapfs-release-develop
      trigger: true
  - task: build
    image: image
    file: ci/shared/tasks/golang-security-scan/linux.yml
    params:
      PATHS: "src/mapfs"
    input_mapping:
      release: mapfs-release-develop

- name: unit-and-integration-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
      resource: mapfs-release-develop
    - get: fstest
    - get: image
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - task: build-binaries
    file: ci/shared/tasks/build-binaries/linux.yml
    privileged: true
    params:
      DEFAULT_PARAMS: "ci/mapfs-release/default-params/build-binaries/linux.yml"
    vars:
      image_repository: cloudfoundry/tas-runtime-build
      image_tag: ((.:image_tag))
  - in_parallel:
#@ for repo in data.values.internal_repos:
    - task: #@ "{}".format(repo)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: true
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_tag: ((.:image_tag))
      input_mapping:
        input-01: fstest
      params:
        DIR: #@ "src/{}".format(repo)
        ENVS: |
          FSTEST_DIR=input-01
        VERIFICATIONS: |
          verify_go repo/$DIR
          verify_go_version_match_bosh_release repo
          verify_gofmt repo/$DIR
          verify_govet repo/$DIR
        DEFAULT_PARAMS: "ci/mapfs-release/default-params/run-bin-test/linux.yml"
#@ end

- name: bump-bosh-blobs
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: meson-git-release
      trigger: true
    - get: ninja-git-release
      trigger: true
      params:
        include_source_tarball: true
    - get: libfuse-git-release
      trigger: true
    - get: repo
      resource: mapfs-release-develop
    - get: image
  - do:
    - task: bump-bosh-blob-meson
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: meson-git-release
      params:
        BOSH_BLOB_PATH: build-deps/meson-*.tar.gz
        AWS_ACCESS_KEY_ID: *aws-uploader-role-id
        AWS_SECRET_ACCESS_KEY: *aws-uploader-role-secret
        AWS_ASSUME_ROLE_ARN: *aws-uploader-role-arn
    - put: repo
      resource: mapfs-release-develop
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-ninja
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: ninja-git-release
      params:
        BOSH_BLOB_PATH: build-deps/ninja-*.tar.gz
        AWS_ACCESS_KEY_ID: *aws-uploader-role-id
        AWS_SECRET_ACCESS_KEY: *aws-uploader-role-secret
        AWS_ASSUME_ROLE_ARN: *aws-uploader-role-arn
    - put: repo
      resource: mapfs-release-develop
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-libfuse
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: libfuse-git-release
      params:
        BOSH_BLOB_PATH: fuse/fuse-*.tar.gz
        AWS_ACCESS_KEY_ID: *aws-uploader-role-id
        AWS_SECRET_ACCESS_KEY: *aws-uploader-role-secret
        AWS_ASSUME_ROLE_ARN: *aws-uploader-role-arn
    - put: repo
      resource: mapfs-release-develop
      params:
       rebase: true
       repository: bumped-repo

- name: claim-env-combined-nfs-mapfs-volume-release-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: mapfs-release-develop
        trigger: true
        passed:
        - check-for-cves
        - unit-and-integration-tests
        - security-scan
      - get: nfs-volume-release
      - put: env-tas-xenial
        params:
          action: create
          duration: 6h
          resource: env
        timeout: 6h

- name: combined-nfs-mapfs-volume-release-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: cryogenics-concourse-tasks
      - get: mapfs-release-develop  
      - get: nfs-volume-release
      - get: image-cryogenics-essentials
      - get: env-tas-xenial
        trigger: true
        passed: [ claim-env-combined-nfs-mapfs-volume-release-tests ]

  - task: rspec
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/run-rspec.build.yml
    input_mapping:
      test-repo: nfs-volume-release
  - in_parallel:
    #! we never test that the release can be upgraded in place (meaning without recreating the VM). 
    #! This lead  to a broken release because of pre-start script failing to run a 2nd time on 
    #! the same VM. It slipped through because all of our deploy scenarios included recreating the VM 
    #! with a new stemcell.
    - task: upgrade-release-in-existing-cf
      image: image-cryogenics-essentials
      config:
        platform: linux
        inputs:
          - name: env-tas-xenial
        run:
          path: bash
          args:
          - -c
          - |
            set -eu
            set -o pipefail
            . <(smith -l env-tas-xenial/metadata bosh)
            export BOSH_DEPLOYMENT=$(bosh ds | grep '^cf-'  | awk '{print $1}')
            bosh manifest > cf.yml
            cat << EOF > ops.yml
            - type: replace
              path: /releases/name=mapfs
              value:
                name: mapfs
                version: latest
            EOF
            until [[ $(bosh releases | grep mapfs | wc -l) -gt 1 ]]; do echo "waiting for dev release to be available"; done
            bosh deploy cf.yml -o ops.yml -n

    - task: bosh-release-test
      image: image-cryogenics-essentials
      file: cryogenics-concourse-tasks/vol-service/run-bosh-release-tests-in-shepherd/task.yml
      params:
        STEMCELL_LINE: xenial
        TEST_REPO: nfs-volume-release
      input_mapping:
        shepherd-env: env-tas-xenial
        mapfs-release: mapfs-release-develop
    - task: bosh-release-test-mapfs
      image: image-cryogenics-essentials
      attempts: *number_of_retries
      file: cryogenics-concourse-tasks/vol-service/run-bosh-release-tests-in-shepherd/task.yml
      params:
        STEMCELL: xenial
        TEST_REPO: mapfs-release #! this needs to match the input name of the task, not the resource name
      input_mapping:
        shepherd-env: env-tas-xenial
        mapfs-release: mapfs-release-develop


- name: env-gate
  plan:
  - get: env-tas-xenial
    passed: [ combined-nfs-mapfs-volume-release-tests ]
  - in_parallel:
      fail_fast: true
      steps:
      - put: env-tas-xenial
        params:
          action: release
          resource: env-tas-xenial
      - get: nfs-volume-release
        passed:
        - combined-nfs-mapfs-volume-release-tests
      - get: mapfs-release-develop
        trigger: true
        passed:
        - combined-nfs-mapfs-volume-release-tests
      - get: every-hour

- name: claim-env
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: nfs-volume-release
        passed:
        - env-gate
      - get: image-cryogenics-essentials
      - get: mapfs-release-develop
        trigger: true
        passed:
        - env-gate
  - put: shepherd-env
    params:
      action: create
      duration: 6h
      resource: shepherd-env
    timeout: 6h
  - put: shepherd-env
    params:
      action: extend
      expire-in: 6h
      resource: shepherd-env
  - task: output-env-details
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/claim-pooled-env.build.yml
    input_mapping:
      pooled-env: shepherd-env

- name: claim-ldap-env
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: image-cryogenics-essentials
      - get: nfs-volume-release
        passed:
        - env-gate
      - get: mapfs-release-develop
        trigger: true
        passed:
        - env-gate
  - put: shepherd-env-ldap
    params:
      action: create
      duration: 6h
      resource: shepherd-env-ldap
    timeout: 6h
  - put: shepherd-env-ldap
    params:
      action: extend
      expire-in: 6h
      resource: shepherd-env-ldap
  - task: output-env-details
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/claim-pooled-env.build.yml
    input_mapping:
      pooled-env: shepherd-env-ldap

- name: deploy-cf
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: shepherd-env
        passed: [ claim-env ]
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: image-cryogenics-essentials
      - get: cf-deployment
      - get: persi-ci
      - get: nfs-volume-release
        passed: [ claim-env ]
      - get: mapfs-release-develop
        passed: [ claim-env ]
  - task: pin-cf-deployment-version
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/pin_cf_deployment_version.build.yml
    input_mapping:
      toolsmiths-env: shepherd-env
  - task: collect-persi-ci-ops-files
    image: image-cryogenics-essentials
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: cf-deployment
      new-ops-files: persi-ci
    params:
      BASE_OPS_FILE_DIR: "operations"
  - task: generate-variables
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/generate_variables.build.yml
    input_mapping:
      smith-env: shepherd-env
    params:
      GENERATE_NFS_VARS: true
      GENERATE_SMB_VARS: false
  - task: bosh-deploy-cf
    image: image-cryogenics-essentials
    attempts: *number_of_retries
    file: persi-ci/scripts/ci/deploy-cf-with-multiple-releases.build.yml
    input_mapping:
      cf-deployment: cf-deployment
      toolsmiths-env: shepherd-env
      ops-files: collected-ops-files
      vars-files: generated-vars
      mapfs-release: mapfs-release-develop
    params:
      VARS_FILES: "nfs-vars.yml"
      OPS_FILES: "operations/use-compiled-releases.yml
                  operations/scale-to-one-az.yml
                  operations/enable-nfs-volume-service.yml
                  updated-nfs-releases.yml
                  operations/test/enable-nfs-test-server.yml
                  operations/backup-and-restore/enable-backup-restore.yml
                  operations/backup-and-restore/enable-restore-nfs-broker.yml
                  operations/experimental/fast-deploy-with-downtime-and-danger.yml"
  - task: run-smoke-tests
    image: image-cryogenics-essentials
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: shepherd-env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    image: image-cryogenics-essentials
    attempts: *number_of_retries
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: shepherd-env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: cats-nfs
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed: [ deploy-cf ]
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
      - get: persi-ci
      - get: cf-acceptance-tests
      - get: cf-deployment-concourse-tasks
      - get: image-cryogenics-essentials
      - get: mapfs-release-develop
        passed: [ deploy-cf ]
  - task: generate-cats-config
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/generate_cats_config.build.yml
    input_mapping:
      smith-env: shepherd-env
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
      CF_USERNAME: admin
      PLAN_NAME: Existing
      SERVICE_NAME: nfs
  - task: run-cats
    image: image-cryogenics-essentials
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    input_mapping:
      integration-config: cats-config
    params:
      CONFIG_FILE_PATH: cats.json

- name: drats
  serial: true
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed: [ deploy-cf ]
      - get: bbr-binary-release
      - get: disaster-recovery-acceptance-tests
      - get: image-cryogenics-essentials
      - get: persi-ci
      - get: mapfs-release-develop
        passed: [ deploy-cf ]
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
  - task: generate-integration-config
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/generate-drats-integration-config.build.yml
    params:
      INTEGRATION_CONFIG_FILE_PATH: config/drats-nfs.json
      UPDATE_INTEGRATION_CONFIG_SCRIPT: persi-ci/scripts/ci/drats-update-integration-config-shp.sh
    input_mapping:
      integration-configs: persi-ci
      smith-env: shepherd-env
  - task: drats-with-integration-config
    image: image-cryogenics-essentials
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    privileged: true
    input_mapping:
      drats-integration-config: updated-integration-configs
    params:
      CONFIG_FILE_PATH: config/drats-nfs.json

- name: pats
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: image-cryogenics-essentials
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
      - get: nfs-volume-release
        passed: [ deploy-cf ]
      - get: mapfs-release-develop
        passed: [ deploy-cf ]
  - task: generate-pats-config-nfs
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/generate_pats_config_shp.build.yml
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
      CF_USERNAME: admin
      BIND_BOGUS_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
      BIND_CONFIG: '["{\"uid\":\"1000\",\"gid\":\"1000\"}", "{\"uid\":\"1000\",\"gid\":\"1000\",\"mount\": \"/var/vcap/data/foo\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"3\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.0\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.1\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.2\"}"]'  #! yamllint disable-line rule:line-length
      CREATE_BOGUS_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/nonexistensevol\"}'
      CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
      PLAN_NAME: Existing
      SERVICE_NAME: nfs
    input_mapping:
      smith-env: shepherd-env
    output_mapping:
      pats-config: nfs-pats-config
  - task: run-pats-nfs
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/run-pats.build.yml
    input_mapping:
      pats-config: nfs-pats-config
    attempts: *number_of_retries
    params:
      PARALLEL_NODES: 5
      TEST_MOUNT_FAIL_LOGGING: true
      TEST_MOUNT_OPTIONS: true
      TEST_MULTI_CELL: true
      TEST_READ_ONLY: true

- name: deploy-cf-with-ldap
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: shepherd-env-ldap
        passed:
        - claim-ldap-env
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment
      - get: persi-ci
      - get: image-cryogenics-essentials
      - get: nfs-volume-release
        passed:
        - claim-ldap-env
      - get: mapfs-release-develop
        passed:
        - claim-ldap-env
  - task: pin-cf-deployment-version
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/pin_cf_deployment_version.build.yml
    input_mapping:
      toolsmiths-env: shepherd-env-ldap
  - task: collect-persi-ci-ops-files
    image: image-cryogenics-essentials
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: cf-deployment
      new-ops-files: persi-ci
    params:
      BASE_OPS_FILE_DIR: "operations"
  - task: generate-variables
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/generate_variables.build.yml
    input_mapping:
      smith-env: shepherd-env-ldap
    params:
      GENERATE_NFS_VARS: true
      GENERATE_SMB_VARS: false
      LDAP_HOST: "nfstestldapserver.service.cf.internal"
      LDAP_SVC_USER: "cn=admin,dc=domain,dc=com"
      LDAP_SVC_PASS: "secret"
      LDAP_PORT: 636
      LDAP_PROTO: tcp
      LDAP_USER_FQDN: "ou=Users,dc=domain,dc=com"
  - task: bosh-deploy-cf
    image: image-cryogenics-essentials
    file: persi-ci/scripts/ci/deploy-cf-with-multiple-releases.build.yml
    input_mapping:
      toolsmiths-env: shepherd-env-ldap
      cf-deployment: cf-deployment
      ops-files: collected-ops-files
      vars-files: generated-vars
      mapfs-release: mapfs-release-develop
    params:
      VARS_FILES: "nfs-vars.yml"
      OPS_FILES: "operations/use-compiled-releases.yml
                  operations/scale-to-one-az.yml
                  operations/enable-nfs-volume-service.yml
                  updated-nfs-releases.yml
                  operations/enable-nfs-ldap.yml
                  operations/test/enable-nfs-test-server.yml
                  operations/test/enable-nfs-test-ldapserver.yml
                  operations/experimental/fast-deploy-with-downtime-and-danger.yml"
  - task: run-smoke-tests
    image: image-cryogenics-essentials
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: shepherd-env-ldap
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    image: image-cryogenics-essentials
    attempts: *number_of_retries
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: shepherd-env-ldap
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: pats-nfs-ldap
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: shepherd-env-ldap
        passed:
        - deploy-cf-with-ldap
        trigger: true
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: image-cryogenics-essentials
      - get: nfs-volume-release
        passed:
        - deploy-cf-with-ldap
      - get: mapfs-release-develop
        passed:
        - deploy-cf-with-ldap
  - in_parallel:
      fail_fast: true
      steps:
      - task: generate-legacy-pats-config
        image: image-cryogenics-essentials
        file: persi-ci/scripts/ci/generate_pats_config_shp.build.yml
        params:
          VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
          BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
          CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
          DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
          PLAN_NAME: Existing
          SERVICE_NAME: nfs-legacy
        input_mapping:
          smith-env: shepherd-env-ldap
        output_mapping:
          pats-config: nfs-legacy-pats-config
      - task: generate-pats-config
        image: image-cryogenics-essentials
        file: persi-ci/scripts/ci/generate_pats_config_shp.build.yml
        params:
          VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
          BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
          CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
          DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
          PLAN_NAME: Existing
          SERVICE_NAME: nfs
        input_mapping:
          smith-env: shepherd-env-ldap
        output_mapping:
          pats-config: nfs-pats-config
  - in_parallel:
      fail_fast: true
      steps:
      - task: run-legacy-pats
        image: image-cryogenics-essentials
        file: persi-ci/scripts/ci/run-pats.build.yml
        input_mapping:
          pats-config: nfs-legacy-pats-config
        params:
          TEST_DOCKER_PORA: true
      - task: run-pats
        image: image-cryogenics-essentials
        file: persi-ci/scripts/ci/run-pats.build.yml
        input_mapping:
          pats-config: nfs-pats-config
        params:
          TEST_DOCKER_PORA: true

- name: ship-what
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: mapfs-release-develop
          passed:
            - pats
            - drats
            - cats-nfs
            - pats-nfs-ldap
          trigger: true
        - get: image
        - get: mapfs-release-release
          params:
            submodules: none
        - get: github-release
        - get: version
          resource: mapfs-version
        - get: shepherd-env
          passed:
            - pats
            - drats
            - cats-nfs
          trigger: true
        - get: shepherd-env-ldap
          passed:
            - pats-nfs-ldap
          trigger: true

    - task: check-safe-to-release-repo
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: mapfs-release-release
        repo: mapfs-release-develop

    - task: build-release-notes-diego-release
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release
        repo: mapfs-release-develop

- name: unclaim-env
  plan:
  - get: shepherd-env
    passed:
    - ship-what
    trigger: true
  - put: shepherd-env
    params:
      action: release
      resource: shepherd-env

- name: unclaim-ldap-env
  plan:
  - get: shepherd-env-ldap
    passed:
    - ship-what
    trigger: true
  - put: shepherd-env-ldap
    params:
      action: release
      resource: shepherd-env-ldap

- name: shipit-mapfs
  serial_groups:
  - mapfs-version
  ensure:
    do:
    - put: mapfs-version
      params:
        bump: patch
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: ci
      - get: image
      - get: cryogenics-concourse-tasks
      - get: image-cryogenics-essentials
      - get: mapfs-release-release
      - get: mapfs-release-develop
        passed: [ship-what]
      - get: version
        resource: mapfs-version
        params:
          bump: final
      - get: develop-branch-mergeback
        params:
          submodules: none

  - task: check-safe-to-release-branch
    image: image
    file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
    input_mapping:
      repo: mapfs-release-develop
      release-repo: mapfs-release-release

  - task: create-final-release
    image: image-cryogenics-essentials
    file: cryogenics-concourse-tasks/bosh-tasks/create-release/task.yml
    input_mapping:
      release-repo: mapfs-release-develop
    output_mapping:
      updated-release-repo: mapfs-final-release
      updated-release-tarball: mapfs-final-release-tarball
    params:
      AWS_ACCESS_KEY_ID: *aws-uploader-role-id
      AWS_SECRET_ACCESS_KEY: *aws-uploader-role-secret
      AWS_ASSUME_ROLE_ARN: *aws-uploader-role-arn
      GIT_USERNAME: *github-user
      GIT_EMAIL: *github-email
      FINAL: true
      RELEASE_NAME: mapfs

  - task: create-release-notes
    file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
    input_mapping:
      git-repo: mapfs-release-develop
    params:
      USE_LATEST_PUBLISHED_TAG: true
  - task: format-release-notes
    image: image-cryogenics-essentials
    file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
    input_mapping:
      template-folder: cryogenics-concourse-tasks
    params:
      TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb

  - put: version
    resource: mapfs-version
    params:
      file: version/number

  - put: mapfs-release-release
    params:
      repository: mapfs-final-release
      tag: version/number
      tag_prefix: v

  - task: merge-release-onto-develop
    image: image
    file: ci/shared/tasks/git-merge-branches/linux.yml
    input_mapping:
      source-branch: mapfs-release-release
      onto-branch: develop-branch-mergeback
    params:
      SOURCE_BRANCH_NAME: release
      ONTO_BRANCH_NAME: develop
  - put: develop-branch-mergeback
    params:
      repository: merged-branch

  - put: github-release-mapfs
    params:
      name: version/number
      tag: version/number
      body: release-notes/release-notes.md
      tag_prefix: v
      globs:
      - mapfs-final-release-tarball/mapfs-*.tgz

- name: manual-bump-mapfs-patch
  serial_groups:
  - mapfs-version
  plan:
  - get: version
    resource: mapfs-version
    params:
      bump: final
  - put: mapfs-version
    params:
      bump: patch

- name: manual-bump-mapfs-minor
  serial_groups:
  - mapfs-version
  plan:
  - get: version
    resource: mapfs-version
    params:
      bump: final
  - put: mapfs-version
    params:
      bump: minor

- name: manual-bump-mapfs-major
  serial_groups:
  - mapfs-version
  plan:
  - get: version
    resource: mapfs-version
    params:
      bump: final
  - put: mapfs-version
    params:
      bump: major
